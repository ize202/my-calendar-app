import { NextResponse } from 'next/server';
import * as XLSX from 'xlsx';
import { createEvents } from 'ics';
import OpenAI from "openai";
import { z } from "zod";

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

const CalendarEvent = z.object({
  title: z.string(),
  start: z.array(z.string().or(z.number())).length(5),
  end: z.array(z.string().or(z.number())).length(5),
  description: z.string(),
  url: z.string().optional().nullable(),
});

const CalendarEvents = z.array(CalendarEvent);

export async function POST(request) {
  try {
    console.log('Received POST request');
    const formData = await request.formData();
    console.log('FormData created');
    const file = formData.get('file');

    if (!file) {
      console.log('No file uploaded');
      return NextResponse.json({ error: 'No file uploaded' }, { status: 400 });
    }

    console.log('File received:', file.name);
    const buffer = await file.arrayBuffer();
    console.log('File converted to ArrayBuffer');
    const workbook = XLSX.read(new Uint8Array(buffer), { type: 'array' });
    console.log('Workbook read successfully');

    const sheetName = workbook.SheetNames[0];
    const worksheet = workbook.Sheets[sheetName];
    const jsonData = XLSX.utils.sheet_to_json(worksheet);
    console.log('JSON data extracted:', JSON.stringify(jsonData).slice(0, 100) + '...');

    // Use AI to interpret the data
    console.log('Calling interpretDataWithAI');
    let events;
    try {
      events = await interpretDataWithAI(jsonData);
      console.log('AI interpretation complete. Events:', JSON.stringify(events).slice(0, 100) + '...');
    } catch (aiError) {
      console.error('Error in AI interpretation:', aiError);
      return NextResponse.json({ error: `AI interpretation failed: ${aiError.message}` }, { status: 500 });
    }

    if (!events || events.length === 0) {
      console.error('No events were generated by the AI');
      return NextResponse.json({ error: 'No events were generated' }, { status: 500 });
    }

    console.log('Creating ICS events');
    let icsEvents = events.map(event => {
      const icsEvent = {
        start: event.start.map(Number),
        end: event.end.map(Number),
        title: event.title,
        description: event.description,
      };
      if (event.url && event.url.trim() !== '') {
        icsEvent.url = event.url;
      }
      return icsEvent;
    });

    console.log('ICS events before creation:', JSON.stringify(icsEvents, null, 2));

    const { error, value } = createEvents(icsEvents);

    if (error) {
      console.error('Error creating ICS events:', error);
      return NextResponse.json({ error: `Failed to create ICS events: ${JSON.stringify(error)}` }, { status: 500 });
    }

    if (!value) {
      console.error('No ICS value generated');
      return NextResponse.json({ error: 'No ICS value generated' }, { status: 500 });
    }

    console.log('ICS events created successfully');
    return new NextResponse(value, {
      status: 200,
      headers: {
        'Content-Type': 'text/calendar',
        'Content-Disposition': 'attachment; filename=calendar.ics',
      },
    });
  } catch (error) {
    console.error('Error processing file:', error);
    return NextResponse.json({ error: `Failed to process the file: ${error.message}` }, { status: 500 });
  }
}

async function interpretDataWithAI(jsonData) {
  console.log('Entering interpretDataWithAI');
  const prompt = `
    You are an AI assistant that interprets Excel data and converts it into calendar events.
    The data represents a schedule of classes or events.
    Please analyze the following JSON data and extract the necessary information to create calendar events.
    Each event should have a title, start date and time, end date and time, description, and URL if available.
    Here's the data:
    ${JSON.stringify(jsonData, null, 2)}

    Return the events as a JSON array in the following format:
    [
      {
        "title": "Event Title",
        "start": ["YYYY", "MM", "DD", "HH", "mm"],
        "end": ["YYYY", "MM", "DD", "HH", "mm"],
        "description": "Event description",
        "url": "Event URL (if available)"
      },
      ...
    ]
    Even if there's only one event, please return it as an array with a single object.
  `;

  console.log('Sending request to OpenAI (GPT-4)');
  try {
    const completion = await openai.chat.completions.create({
      model: "gpt-4o-mini",
      messages: [
        { role: "system", content: "Extract the event information from the provided data." },
        { role: "user", content: prompt },
      ],
      response_format: { type: "json_object" },
    });

    const rawResponse = JSON.parse(completion.choices[0].message.content);
    console.log('Raw AI response:', JSON.stringify(rawResponse).slice(0, 100) + '...');

    let events;
    if (Array.isArray(rawResponse)) {
      events = rawResponse;
    } else if (rawResponse.events && Array.isArray(rawResponse.events)) {
      events = rawResponse.events;
    } else if (typeof rawResponse === 'object' && rawResponse !== null) {
      events = [rawResponse];
    } else {
      throw new Error('Unexpected response format from AI');
    }

    // Validate and transform each event
    const validatedEvents = events.map(event => {
      const validatedEvent = CalendarEvent.parse(event);
      // Ensure start and end are arrays of numbers
      validatedEvent.start = validatedEvent.start.map(Number);
      validatedEvent.end = validatedEvent.end.map(Number);
      // Remove url if it's an empty string
      if (validatedEvent.url === '') {
        delete validatedEvent.url;
      }
      return validatedEvent;
    });

    console.log('Validated events:', JSON.stringify(validatedEvents, null, 2));

    return validatedEvents;
  } catch (error) {
    console.error('Error in OpenAI API call or validation:', error);
    throw error;
  }
}
